ResultSet holds only data
RowSet is an api 

Types of RowSet 
cached, filter, jdbc, join, web


RowSetEvent
RowSetListener
RowSetEventListener



sql                     nosql
schema based        schema less
ordered             unordered
tables              collections
rows/records        document
fields/columns      key value pairs

--> We can have schema based in NoSQL as well

mongodb, cassandra db, dynamo db, couchbase, redis, 

mongodb.com --> learn mongo db
Mongo DB
----------------------------------------------
mongod: server side
mongosh: client side(CLI tool)
mongo-compass: client side (gui tool)
mongo-cloud: cloud service


show dbs
use db_name
db: to show current db
show collections

db.Employee.insetOne('name': 'John', 'age': 25)
db.Employee.find()  // find all records
db.Employee.find({'age': {$lt: 30}}) --> greater than 30
db.Employee.find({$or: [{'age': {$gt: 35}}, {'designation': 'Tester'}]})

updateOne, updateMany, bulkWrite 
db.Employee.updateOne({'name': 'Bonal'}, {$set: {'salary': 80000}}) --> update one record
db.Employee.find({}, {'name':1,'age':1, '_id':0}) --> find all records with only name and age fields and not the _id field which is for object id

db.Employee.find({}, {'name':1,'age':1, '_id':0}).limit(3); --> find first 3 records

db.Employee.find({}, {'name':1,'age':1, '_id':0}).skip(2); --> skip first 2 records

db.Employee.find({}, {'name':1,'age':1, '_id':0}).sort({'age': -1}) --> sort by age in descending order only -1 is allowed for descending order , 1 for ascending order no other values allowed

db.Employee.find({}, {'name':1,'age':1, 'designation':1, '_id':0}).sort({'designation': 1,'age': -1}) --> sort by designation in ascending order and then by age in descending order


db.deleteOne(), db.deleteMany(), db.drop() --> delete one, delete many, drop the collection