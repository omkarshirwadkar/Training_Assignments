---------------------Morining Session---------------------------

Immutable:

To print the details we have to display one by one the properties of Student
s1.getName(), s1.getRollNo(), s1.getStandard()
We can create a display method in Student class to print the details
toString() method is used to print the details of the object

Whenever the object is printed it will print the toString() method
If there is no toString() method it will print the memory address of the object as every class extends Object class in Java
If the toString() method is overridden then when printing the object it will execute the toString() method
The class should be final and it should implement the Serializable interface to be used in the serialization process.
We should also override the hashCode() method to be used in the HashMap and HashSet classes.

--> record in java is used to create a class with immutable properties

Why make a class immutable?
1. It is thread-safe
2. It is easier to reason about the code
3. It is easier to debug the code
4. It is easier to test the code
5. It is easier to cache the objects
6. It is easier to use in multi-threaded environment
7. It is easier to use in concurrent environment
8. It is easier to use in distributed environment
9. It is easier to use in cloud environment
10. It is easier to use in big data environment
11. Where the object is created just once and then it is not needed to modified like transactions

What is a canonical constructor?
A canonical constructor is a constructor that is used to create an object from a set of parameters.


sealed class is used to create a class that can be extended by only one class
permits is used to create a class that can be extended by multiple classes
non-sealed class is used to create a class that can be extended by any class

sealed class can only be extended by another sealed, final or non-sealed class
non-sealed class can be extended by any class


-----------------------------Afternoon Session---------------------------

Anti-Patterns: Bad Practices to Avoid
Patterns: Best Practices to Write Clean Code
--> Architectural Patterns: MVC, MVP, MVVM, REST, Microservices, Event-Driven Architecture
--> Messaging Patterns: P2P, Pub/Sub, Request/Response
--> Database Patterns: ER, DAO, 
--> Integration Patterns: Point-2-Point, API Gateway, Service Bus, Message Queue, Hub-n-Spoke
--> Programmatic Patterns: Mutable, Immutable
--> Designing Patterns:
    --> Object-Oriented:
        --> Java SE:
            --> Creational: Singleton, Factory, Builder, Prototype, Abstract Factory
            --> Structural: Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy
            --> Behavioral: Observer, Strategy, Template Method, Visitor, Command, Iterator, Mediator, Memento, State, Chain of Responsibility(COR), Interpreter

        --> Java EE:
            Presentation
            Business
            Integration


1. Singleton: A class that can have only one instance and provides a global point of access to that instance.
Early Initialization : The instance is created when the class is loaded.
Lazy Initialization : The instance is created when it is first requested.


Assignment:
class A{}
class B extends A{}
public class SingletonAssignment{
    public static void main(String[] args) {
        A a1 = A.getObject();
        B b1 = B.getObject();

        // If more than 1 object created then throw an exception
        
    }
}