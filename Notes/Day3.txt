
------------------------------Morning Session-------------------------------------------
The javap tool is used to get the information of any class or interface.

A pure class has all variables private and all methods public. 
A class with both public and private variables and methods is called a hybrid class.

--> A a1 = new B();
--> a1.abc() ==> the method present in class B is called as a1 is an object of class B.


---------------------------Interface---------------------------------

Can we have abstract class without any or one abstract methods --> You can have abstract class without any abstract methods. But it is not recommended. It is better to have a normal class

--> Interface methods does not have a body. They are abstract by default. We can have multiple methods in an interface.
--> Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an "Animal" object in the MyMainClass)
--> Interface methods do not have a body - the body is provided by the "implement" class
--> On implementation of an interface, you must override all of its methods
--> Interface methods are by default abstract and public
--> Interface attributes are by default public, static and final
--> An interface cannot contain a constructor (as it cannot be used to create objects)
--> An interface cannot contain a static method (as it cannot be used to create objects)

We cannot access the method of other interfaces but we can access the variables of other interfaces

Advantages:
--> Achieiving Security
--> Achieving Abstraction



------------------------------Afternoon Session------------------------------------------

                Constructor                   v/s                   Method
Same as class name                                                 Any name                               
Called when object is created                               Called after object created
Must not have a return type                                     Have return type


Similarities
--> Both are used to initialize the object
--> Both are used to perform some operation
--> Exception Handling
--> Return statement can be used in a constructor and method as well
--> Any Logic


                Abstract Class                          v/s                      Interface
Methods with body as well as methods without body                           Only Abstract Methods
Variables which can be Modified                                             Only final Variables
Can have instance variables                                                 Only static Variables 
Doesn't support multiple inheritance                                    Supports Multiple Inheritance
Variables/Methods can have various access modifiers                      Only public method/variables
Can have Constructor                                                        Don't have constructor


Interfaces never come under class hierarchy or object hierarchy because we cannot create an object of interface.
But abstract class comes under class hierarchy and object hierarchy.


Interfaces will save memory space, the constructor calls, better experience over abstract class
